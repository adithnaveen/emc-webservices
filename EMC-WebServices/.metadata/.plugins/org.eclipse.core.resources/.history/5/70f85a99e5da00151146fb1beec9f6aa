package com.emc.resource;

import java.util.List;

import javax.annotation.PostConstruct;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.emc.entity.Message;
import com.emc.service.MessageService;

@Path("/message")
public class MessageResource {
	//which will take 1 param and return the object of
	// message 
	
	MessageService messageService;

	@PostConstruct
	public void init(){
		 messageService= new MessageService();
	}
	
	
	// @Produces("application/json")
		// or 
		@Path("/{messageId}/{another}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Message getMessage(
				@PathParam("messageId") long messageId,
				@PathParam("another") String anotherMessage
		){
		System.out.println("AnotherMessage " + anotherMessage);
		return messageService.getMessage(messageId);
	}
	
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Message> getMessages(){
		return messageService.getAllMessages();
	}
	

	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Message postMessage(Message message){
		return messageService.insertMessage(message);
	}
	
	@PUT
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Message updateMessage(Message message){
		return messageService.updateeMessage(message);
	}
	
	
	@DELETE
	@Produces(MediaType.APPLICATION_JSON)
	public String deleteMessage(
				@PathParam("messageId") long messageId){
		return  messageService.deleteMessage(messageId);
	}
	
}





